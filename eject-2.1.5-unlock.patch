--- eject-orig/eject.c	2012-03-21 01:16:32.000000000 +0400
+++ eject/eject.c	2012-03-21 01:21:33.084185123 +0400
@@ -560,6 +560,25 @@
 }
 
 /*
+ * Unlock tray using CDROM_LOCKDOOR ioctl.
+ * New kernels doesn't automatically unlock tray before ejecting,
+ * and the new udev automatically locks it.
+*/
+static int UnlockCdrom(int fd)
+{
+	int status = -1;
+
+	if (v_option)
+		printf(_("%s: unlocking tray using CDROM_LOCKDOOR ioctl\n"), programName);
+
+	status = ioctl(fd, CDROM_LOCKDOOR, 0);
+	if (v_option && status != 0)
+		printf(_("%s: CDROM_LOCKDOOR ioctl failed\n"), programName);
+
+	return (status == 0);
+}
+
+/*
  * Toggle tray.
  *
  * Written by Benjamin Schwenk <benjaminschwenk@yahoo.de> and
@@ -591,6 +610,8 @@
 			return;
 	}
 
+	UnlockCdrom(fd);
+
 	/* Try to open the CDROM tray and measure the time therefor
 	 * needed.  In my experience the function needs less than 0.05
 	 * seconds if the tray was already open, and at least 1.5 seconds
@@ -614,7 +635,11 @@
 	 * was already open. In this case, close it now. Else the tray was
 	 * closed before. This would mean that we are done.  */
 	if (time_elapsed < TRAY_WAS_ALREADY_OPEN_USECS)
+	{
+		if (v_option)
+			printf(_("%s: CD-ROM tray was already open, closing it\n"), programName);
 		CloseTray(fd);
+	}
 
 #else
     fprintf(stderr, _("%s: CD-ROM tray toggle command not supported by this kernel\n"), programName);
@@ -729,7 +754,9 @@
 static int EjectCdrom(int fd)
 {
 	int status = -1;
-
+	
+	UnlockCdrom(fd);
+	
 #if defined(CDROMEJECT)
 	status = ioctl(fd, CDROMEJECT);
 #elif defined(CDIOCEJECT)
